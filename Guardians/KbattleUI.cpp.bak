#include "stdafx.h"

CBattleUI::CBattleUI(LPDIRECT3DDEVICE9 _pDevice,CGameData* _pGameData) :
	m_pDevice(_pDevice),m_pGameData(_pGameData)
{
	CTexMgr.Load(4, m_pDevice); //バトルUI画像読み込み
	battleUI=CTexMgr.Get(TEX_BATTLE_UI );
	blackpicture=CTexMgr.Get(TEX_BATTLE_BLACK );
	enemyHP=CTexMgr.Get(TEX_BATTLE_ENEMY_HP);

	m_charaID[ALDO]=ALDO;				//仮キャラ
	m_charaID[NERU_MARU]=NERU_MARU;				//仮キャラ
	m_charaID[MINE]=MINE;				//仮キャラ

	m_chara[ALDO].hp		= m_chara[ALDO].MAXhp		 = m_pGameData->m_chara[ALDO].hp;	//アルドファウトの最大ＨＰ
	m_chara[NERU_MARU].hp	= m_chara[NERU_MARU].MAXhp	 = m_pGameData->m_chara[NERU_MARU].hp;	//ネルの最大ＨＰ
	m_chara[MINE].hp		= m_chara[MINE].MAXhp		 = m_pGameData->m_chara[MINE].hp;	//ミネルツァの最大ＨＰ
							 
	m_chara[ALDO].mp		= m_chara[ALDO].MAXmp		 = m_pGameData->m_chara[ALDO].mp;	//アルドファウトの最大ＭＰ
	m_chara[NERU_MARU].mp	= m_chara[NERU_MARU].MAXmp	 = m_pGameData->m_chara[NERU_MARU].mp;	//ネルの最大ＭＰ
	m_chara[MINE].mp		= m_chara[MINE].MAXmp		 = m_pGameData->m_chara[MINE].mp;	//仮ミネルツァの最大ＭＰ

	m_activeChara = m_chara[m_pGameData->m_turnNo[0]];


	m_battling=TRUE;			//バトル判定
	m_combomode=FALSE;			//コンボ判定
	m_combing=FALSE;   			//コンボ継続判定
	m_combonum=0;  				//コンボ数
    m_combotime=0;				//コンボ制限時間
	m_comboalpha=255;			//コンボアルファ値
    m_charachange=FALSE;		//キャラ交代判定  
    m_changecount=0;			//キャラ交代時間数
	m_charachangetime=0;		//キャラ交代TIME
	m_startchange=TRUE;			//キャラ初期交代
	m_enemyMAXHP=1065;          //敵のHP(仮)
	//m_ishit=FALSE;              //あたり判定

}

CBattleUI::~CBattleUI()
{

}
void CBattleUI::Control()
{

}

void CBattleUI::Draw()
{
	//UI表示
	int damage=0; //ダメージ数
	damage++;
	int MPuse=0;  //ＭＰ消費量

	static int add = 2; // 1fに減らすゲージ量

	// HPを減らす
	if( damage > 0 ){
		m_activeChara.hp -= add;
		damage -= add;
	}
	if( m_activeChara.hp < 0) m_activeChara.hp = 0;
	// MPを減らす
	if( MPuse > 0 ){
		m_activeChara.mp -= add;
		MPuse -= add;
	}
	if( m_activeChara.mp < 0) m_activeChara.mp = 0;


	float HPper[3];             //HP%パーセンテージ
	float MPper[3];				//MP%パーセンテージ
	for(int i=0;i<3;i++){		//HP%パーセンテージ MP%パーセンテージ処理
		HPper[i]=105*(1.0f-(static_cast<float>(m_chara[m_charaID[i]].hp)/m_chara[m_charaID[i]].MAXhp));
		MPper[i]=105*(1.0f-(static_cast<float>(m_chara[m_charaID[i]].mp)/m_chara[m_charaID[i]].MAXmp));
	}
	if(CScene::m_keyStatePush == KEY_A){
	    m_battling=FALSE;
	}
	if(m_battling){  //バトル時
		m_vertex.DrawTextureLT(m_pDevice,battleUI,101,10,120,465,207,570);	//選んでいるキャラの黒色バー表示
		m_vertex.DrawTextureLT(m_pDevice,battleUI,101,10+HPper[0],0,465+HPper[0],60,570);	//選んでいるキャラのHP表示
		m_vertex.DrawTextureLT(m_pDevice,battleUI,127,10+MPper[0],60,465+MPper[0],120,570);	//選んでいるキャラのMP表示
		m_vertex.DrawTextureLT(m_pDevice,battleUI,45,10,0+(m_charaID[0]*145),360,145+(m_charaID[0]*145),465);	//選んでいるキャラの表示
		//m_vertex.SetSizeX(0.6095);
		//m_vertex.SetSizeY(0.4482);
		//m_vertex.DrawTextureLT(m_pDevice,battleUI,231,50,120,465,207,570);	//選んでいる２番目のキャラの黒色バー表示	
		//m_vertex.DrawTextureLT(m_pDevice,battleUI,232,50+(HPper[1]/2.2),0, 465+HPper[1] ,60,570);		//選んでいる２番目のキャラのHP表示
		//m_vertex.DrawTextureLT(m_pDevice,battleUI,247,50+MPper[1]/2.2,60,465+MPper[1] ,120,570);	//選んでいる２番目のキャラのMP表示
		//m_vertex.DrawTextureLT(m_pDevice,battleUI,195,50,0+(m_charaID[1]*145),360,145+(m_charaID[1]*145),465);	//選んでいる２番目のキャラ表示
		//m_vertex.DrawTextureLT(m_pDevice,battleUI,326,50,120,465,207,570);	//選んでいる３番目のキャラの黒色バー表示
		//m_vertex.DrawTextureLT(m_pDevice,battleUI,327,50+HPper[2]/2.2,0, 465+HPper[2],60,570);		//選んでいる３番目のキャラのHP表示
		//m_vertex.DrawTextureLT(m_pDevice,battleUI,342,50+MPper[2]/2.2,60,465+MPper[2],120,570);	//選んでいる３番目のキャラのMP表示
		//m_vertex.DrawTextureLT(m_pDevice,battleUI,290,50,0+(m_charaID[2]*145),360,145+(m_charaID[2]*145),465);	//選んでいる３番目のキャラ表示
		//m_vertex.SetSizeY(1);
		//m_vertex.SetSizeX(1);
		//選んでいる道具のアイコン表示
		if(m_pGameData->m_hasTools.empty())0; //何も所持していなければ表示なし
		else{
			switch(m_pGameData->m_hasTools[0].no){ //仮	
						case 0:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,0,40,184,80);
							   break;
						case 1:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,0,80,184,120); 
							   break;
						case 2:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,0,120,184,160); 
							   break;
						case 3:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,0,160,184,200); 
							   break;
						case 4:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,0,200,184,240); 
							   break;
						case 5:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,0,240,184,280); 
							   break;
						case 6:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,0,280,184,320); 
							   break;
						case 7:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,184,40,368,80); 
							   break;
						case 8:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,184,80,368,120); 
							   break;
						case 9:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,184,120,368,160); 
							   break;
						case 10:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,184,160,368,200); 
							   break;
						case 11:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,184,200,368,240); 
							   break;
						case 12:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,184,240,368,280); 
							   break;
						case 13:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,184,280,368,320); 
							   break;
					}
					//選んでいる道具の個数表示
					m_vertex.DrawTextureLT(m_pDevice,battleUI,355,3,0+(20*m_pGameData->m_hasTools[0].nums),0,20+(20*m_pGameData->m_hasTools[0].nums),40);
				}
		//コンボ数表示
		if(	0/*m_character->isHit*/){
			m_combonum++;
			m_combing=TRUE;
		};	
		//if(CScene::m_keyStatePush == KEY_S){
		//	m_combonum++; //仮
		//	m_combing=TRUE; //仮
		//}
		//CScene::m_keyStatePush =NULL;//仮
		int combodiv[3];	//コンボ分割
		int l_combonum;		//コンボ数格納
		if(m_combonum>=2){	//コンボ数が2以上の場合コンボ発動
			m_combomode=TRUE; 
			m_combotime++;
			l_combonum=m_combonum;
			for(int i=2;i>=0;i--){	//コンボ分割
				combodiv[i]=l_combonum%10;
				l_combonum/=10;
			}
		}
		if(m_combomode==TRUE){
			if(m_combing==TRUE){  //コンボ継続中
				 m_comboalpha=255;
				 //if(//攻撃を受けたとき(あたり判定)){m_comboalpha-=10};
				 m_vertex.DrawTextureLT(m_pDevice,battleUI,55,160,296,770,616,870,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
				 if(m_combonum<10){ //コンボ数が９以下
					m_vertex.DrawTextureLT(m_pDevice,battleUI,188,160,296+(64*combodiv[2]),680,360+(64*combodiv[2]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
				 }
				 else if(10<=m_combonum&&100>m_combonum){	//コンボ数が10以上100以下
					m_vertex.DrawTextureLT(m_pDevice,battleUI,144,160,296+(64*combodiv[1]),680,360+(64*combodiv[1]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
					m_vertex.DrawTextureLT(m_pDevice,battleUI,188,160,296+(64*combodiv[2]),680,360+(64*combodiv[2]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
				 }
				 else{ //コンボ数が100以上
					m_vertex.DrawTextureLT(m_pDevice,battleUI,100,160,296+(64*combodiv[0]),680,360+(64*combodiv[0]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
		            m_vertex.DrawTextureLT(m_pDevice,battleUI,144,160,296+(64*combodiv[1]),680,360+(64*combodiv[1]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
		            m_vertex.DrawTextureLT(m_pDevice,battleUI,188,160,296+(64*combodiv[2]),680,360+(64*combodiv[2]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));		 
				 }
				 m_combotime=0;
				 m_combing=FALSE;
			}
			else{  //コンボ停止中
				if(m_combotime<=120){ //2秒以下の場合
					 m_comboalpha-=0.6;
					 //if(//攻撃を受けたとき(当たり判定)){m_comboalpha-=10};
				     m_vertex.DrawTextureLT(m_pDevice,battleUI,55,160,296,770,616,870,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
				     if(m_combonum<10){ //コンボ数が９以下
						m_vertex.DrawTextureLT(m_pDevice,battleUI,188,160,296+(64*combodiv[2]),680,360+(64*combodiv[2]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
					 }
					 else if(10<=m_combonum&&100>m_combonum){	//コンボ数が10以上100以下
						m_vertex.DrawTextureLT(m_pDevice,battleUI,144,160,296+(64*combodiv[1]),680,360+(64*combodiv[1]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
						m_vertex.DrawTextureLT(m_pDevice,battleUI,188,160,296+(64*combodiv[2]),680,360+(64*combodiv[2]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
					 }
					else{ //コンボ数が100以上
						m_vertex.DrawTextureLT(m_pDevice,battleUI,100,160,296+(64*combodiv[0]),680,360+(64*combodiv[0]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
						m_vertex.DrawTextureLT(m_pDevice,battleUI,144,160,296+(64*combodiv[1]),680,360+(64*combodiv[1]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
						m_vertex.DrawTextureLT(m_pDevice,battleUI,188,160,296+(64*combodiv[2]),680,360+(64*combodiv[2]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));		 
					}
					 m_combing=FALSE;
				}
				else{  //2秒以上の場合
				     m_comboalpha-=3;
					 //if(//攻撃を受けたとき){m_comboalpha-=10};
				     m_vertex.DrawTextureLT(m_pDevice,battleUI,55,160,296,770,616,870,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
					 if(m_combonum<10){ //コンボ数が９以下
						m_vertex.DrawTextureLT(m_pDevice,battleUI,188,160,296+(64*combodiv[2]),680,360+(64*combodiv[2]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
					 }
					else if(10<=m_combonum&&100>m_combonum){	//コンボ数が10以上100以下
						m_vertex.DrawTextureLT(m_pDevice,battleUI,144,160,296+(64*combodiv[1]),680,360+(64*combodiv[1]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
						m_vertex.DrawTextureLT(m_pDevice,battleUI,188,160,296+(64*combodiv[2]),680,360+(64*combodiv[2]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
					}
					else{ //コンボ数が100以上
						m_vertex.DrawTextureLT(m_pDevice,battleUI,100,160,296+(64*combodiv[0]),680,360+(64*combodiv[0]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
						m_vertex.DrawTextureLT(m_pDevice,battleUI,144,160,296+(64*combodiv[1]),680,360+(64*combodiv[1]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));
						m_vertex.DrawTextureLT(m_pDevice,battleUI,188,160,296+(64*combodiv[2]),680,360+(64*combodiv[2]),770,D3DCOLOR_ARGB(static_cast<int>(m_comboalpha),255,255,255));		 
					}
				     m_combing=FALSE;
				}
			}
			if(m_comboalpha<=0){ //alpa値が0以下になった時
			   m_combotime=0;
			   m_combomode=FALSE; 
			   m_combonum=0;
			}
		}	
	}    
	else{ //交替操作時
		//m_vertex.DrawTextureLT(m_pDevice,blackpicture,0,0,0,0,1280,720,D3DCOLOR_ARGB(128,255,255,255));		//黒画像表示
		//if(m_startchange){ //初期画像
		//	CScene::m_keyStatePush = NULL;
		//	m_vertex.SetSizeX(0.6095);
		//	m_vertex.SetSizeY(0.4482);
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,141,65,120,465,207,570);										//選んでいるキャラの黒色バー表示	
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,141,65+(HPper[0]/2.2),0, 465+HPper[0],60,570);				//選んでいるキャラのHP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,155,65+(MPper[0]/2.2),60,465+MPper[0],120,570);				//選んでいるキャラのMP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,105,65,0+(m_charaID[0]*145),360,145+(m_charaID[0]*145),465);	//選んでいるキャラの表示
		//	m_vertex.SetSizeX(1);
		//	m_vertex.SetSizeY(1);
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,253,50,120,465,207,570);	//選んでいる２番目のキャラの黒色バー表示	
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,253,50+HPper[1],0, 465+HPper[1],60,570);		//選んでいる２番目のキャラのHP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,280,50+MPper[1],60,465+MPper[1],120,570);	//選んでいる２番目のキャラのMP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,195,50,0+(m_charaID[1]*145),360,145+(m_charaID[1]*145),465);	//選んでいる２番目のキャラ表示
		//	m_vertex.SetSizeX(0.6095);
		//	m_vertex.SetSizeY(0.4482);
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,378,65,120,465,207,570);	//選んでいる３番目のキャラの黒色バー表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,379,65+(HPper[2]/2.2),0, 465+HPper[2],60,570);		//選んでいる３番目のキャラのHP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,394,65+(MPper[2]/2.2),60,465+MPper[2],120,570);	//選んでいる３番目のキャラのMP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,342,65,0+(m_charaID[2]*145),360,145+(m_charaID[2]*145),465);	//選んでいる３番目のキャラ表示
		//	m_vertex.SetSizeY(1);
		//	m_vertex.SetSizeX(1);
		//}
		//if(CScene::m_keyStatePush == KEY_A){ 
		//	m_charachange=TRUE; 
		//	m_changecount++;
		//	m_charachangetime=0;
		//	m_startchange=FALSE;
		//}
		//if(m_changecount==0){
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,195,100,0,570+(m_charaID[1]*110),300,680+(m_charaID[1]*110));		//選んでいるキャラのキャラ名バー表示
		//}
		//if(m_changecount<15){	//15frame以内の移動処理
		//	if(CScene::m_keyStatePush == KEY_Z)CScene::m_keyStatePush = KEY_A;
		//	m_vertex.SetSizeX(0.6095);
		//	m_vertex.SetSizeY(0.4482);
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,141+(15.8*m_changecount),65,120,465,207,570);	//選んでいるキャラの黒色バー表示	
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,141+(15.8*m_changecount),65+(HPper[0]/2.2),0, 465+HPper[0],60,570);		//選んでいるキャラのHP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,155+(15.8*m_changecount),65+(MPper[0]/2.2),60,465+MPper[0],120,570);		//選んでいるキャラのMP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,105+(15.8*m_changecount),65,0+(m_charaID[0]*145),360,145+(m_charaID[0]*145),465);	//選んでいるキャラの表示
		//	m_vertex.SetSizeX(1-(0.026*m_changecount));
		//	m_vertex.SetSizeY(1-(0.037*m_changecount));
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,253-(7.8*m_changecount),50+(0.8*m_changecount),120,465,207,570);	//選んでいる２番目のキャラの黒色バー表示	
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,253-(7.5*m_changecount),50+((0.8-(3.82*(1.0-(static_cast<float>(m_chara[m_charaID[1]].hp)/m_chara[m_charaID[1]].MAXhp))))*m_changecount)+HPper[1],0, 465+HPper[1],60,570);		//選んでいる２番目のキャラのHP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,280-(8.2*m_changecount),50+((0.8-(3.82*(1.0-(static_cast<float>(m_chara[m_charaID[1]].mp)/m_chara[m_charaID[1]].MAXmp))))*m_changecount)+MPper[1],60,465+MPper[1],120,570);	//選んでいる２番目のキャラのMP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,195-(6.0*m_changecount),50+(0.8*m_changecount),0+(m_charaID[1]*145),360,145+(m_charaID[1]*145),465);	//選んでいる２番目のキャラ表示
		//	m_vertex.SetSizeX(0.6095+(0.026*m_changecount));
		//	m_vertex.SetSizeY(0.4482+(0.037*m_changecount));
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,378-(8.5*m_changecount),65-(0.7*m_changecount),120,465,207,570);	//選んでいる３番目のキャラの黒色バー表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,379-(8.4*m_changecount),65-((0.8-(3.6*(1.0-(static_cast<float>(m_chara[m_charaID[2]].hp)/m_chara[m_charaID[2]].MAXhp))))*m_changecount)+(HPper[2]/2.2),0, 465+HPper[2],60,570);		//選んでいる３番目のキャラのHP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,394-(7.8*m_changecount),65-((0.8-(3.6*(1.0-(static_cast<float>(m_chara[m_charaID[2]].mp)/m_chara[m_charaID[2]].MAXmp))))*m_changecount)+(MPper[2]/2.2),60,465+MPper[2],120,570);	//選んでいる３番目のキャラのMP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,342-(10.0*m_changecount),65-(0.8*m_changecount),0+(m_charaID[2]*145),360,145+(m_charaID[2]*145),465);	//選んでいる３番目のキャラ表示
		//	m_vertex.SetSizeY(1);
		//	m_vertex.SetSizeX(1);
		//	m_startchange=FALSE;
	
		//}
		//else{
		//	//画像をもとの場所に移動
		//	m_changecount=0;
		//	m_charachange=FALSE;
		//	int sub=m_charaID[0];
		//	m_charaID[0]=m_charaID[1];	//キャラ画像移動
		//	m_charaID[1]=m_charaID[2];
		//	m_charaID[2]=sub;
		//	for(int i=0;i<3;i++){	 //HP%パーセンテージ MP%パーセンテージ処理
		//		HPper[i]=105*(1.0f-(static_cast<float>(m_chara[m_charaID[i]].hp)/m_chara[m_charaID[i]].MAXhp));
		//		MPper[i]=105*(1.0f-(static_cast<float>(m_chara[m_charaID[i]].mp)/m_chara[m_charaID[i]].MAXmp));
		//	}
		//	CScene::m_keyStatePush =NULL;
		//	m_vertex.SetSizeX(0.6095);
		//	m_vertex.SetSizeY(0.4482);
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,141,65,120,465,207,570);										//選んでいるキャラの黒色バー表示	
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,141,65+(HPper[0]/2.2),0, 465+HPper[0],60,570);				//選んでいるキャラのHP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,155,65+(MPper[0]/2.2),60,465+MPper[0],120,570);				//選んでいるキャラのMP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,105,65,0+(m_charaID[0]*145),360,145+(m_charaID[0]*145),465);	//選んでいるキャラの表示
		//	m_vertex.SetSizeX(1);
		//	m_vertex.SetSizeY(1);
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,253,50,120,465,207,570);	//選んでいる２番目のキャラの黒色バー表示	
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,253,50+HPper[1],0, 465+HPper[1],60,570);		//選んでいる２番目のキャラのHP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,280,50+MPper[1],60,465+MPper[1],120,570);	//選んでいる２番目のキャラのMP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,195,50,0+(m_charaID[1]*145),360,145+(m_charaID[1]*145),465);	//選んでいる２番目のキャラ表示
		//	m_vertex.SetSizeX(0.6095);
		//	m_vertex.SetSizeY(0.4482);
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,378,65,120,465,207,570);	//選んでいる３番目のキャラの黒色バー表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,379,65+(HPper[2]/2.2),0, 465+HPper[2],60,570);		//選んでいる３番目のキャラのHP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,394,65+(MPper[2]/2.2),60,465+MPper[2],120,570);	//選んでいる３番目のキャラのMP表示
		//	m_vertex.DrawTextureLT(m_pDevice,battleUI,342,65,0+(m_charaID[2]*145),360,145+(m_charaID[2]*145),465);	//選んでいる３番目のキャラ表示
		//	m_vertex.SetSizeY(1);
		//	m_vertex.SetSizeX(1);
		//	m_startchange=FALSE;
		//}
			//選んでいる道具のアイコン表示
		if(m_pGameData->m_hasTools.empty());   //何も所持していなければ表示なし
		else{
			switch(m_pGameData->m_hasTools[0].no){ //仮	
				case 0:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,0,40,184,80,D3DCOLOR_ARGB(128,255,255,255));
						   break;
				case 1:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,0,80,184,120,D3DCOLOR_ARGB(128,255,255,255)); 
						   break;
				case 2:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,0,120,184,160,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 3:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,0,160,184,200,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 4:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,0,200,184,240,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 5:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,0,240,184,280,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 6:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,0,280,184,320,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 7:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,184,40,368,80,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 8:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,184,80,368,120,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 9:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,184,120,368,160,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 10:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,184,160,368,200,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 11:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,184,200,368,240,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 12:m_vertex.DrawTextureLT(m_pDevice, battleUI,195,3,184,240,368,280,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
				case 13:m_vertex.DrawTextureLT(m_pDevice,  battleUI,195,3,184,280,368,320,D3DCOLOR_ARGB(128,255,255,255)); 
					   break;
			}
			//選んでいる道具の個数表示
			m_vertex.DrawTextureLT(m_pDevice,battleUI,355,3,0+(20*m_pGameData->m_hasTools[0].nums),0,20+(20*m_pGameData->m_hasTools[0].nums),40,D3DCOLOR_ARGB(128,255,255,255));
		}
		
		if(m_charachangetime>120){	//2秒超えるとバトルモードにもどる
			m_battling=TRUE;
			CScene::m_keyStatePush =NULL;
			int sub=m_charaID[0];
			m_charaID[0]=m_charaID[1];
			m_charaID[1]=m_charaID[2];
			m_charaID[2]=sub;
			m_charachangetime=0;
			m_startchange=TRUE;
		}
		 m_charachangetime++;	
	}
	


int enemydamage=360;//仮
	enemydamage=static_cast<float>(enemydamage)/m_enemyMAXHP*175;//仮 計算式　敵が受けたダメージ÷敵最大HP*175px
	//敵HP表示
	//敵1体時
	//黒ゲージ
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,240,680,0,45,35,70);
	for(int i=0;i<3;i++){
		 m_vertex.DrawTextureLT(m_pDevice,enemyHP,275+(i*200),680,100,45,300,67);
	}
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,875,680,100,45,200,67);
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,975,680,35,45,55,70);
	//赤ゲージ
	int enemydamage1;
	if(enemydamage>720&&enemydamage<=730)enemydamage1=enemydamage-720;
	else if(enemydamage>730)enemydamage1=10;
	else  enemydamage1=0;
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,240,680,0,70,35-enemydamage1,95);
	int enemydamage2;
	if(enemydamage>520&&enemydamage<=720)enemydamage2=enemydamage-520;
	else if(enemydamage>720)enemydamage2=200;
	else  enemydamage2=0;
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,275,680,100,70,300-enemydamage2,92);
	int enemydamage3;
	if(enemydamage>320&&enemydamage<=520)enemydamage3=enemydamage-320;
	else if(enemydamage>520)enemydamage3=200;
	else  enemydamage3=0;
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,475,680,100,70,300-enemydamage3,92);
	int enemydamage4;
	if(enemydamage>120&&enemydamage<=320)enemydamage4=enemydamage-120;
	else if(enemydamage>320)enemydamage4=200;
	else  enemydamage4=0;
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,675,680,100,70,300-enemydamage4,92);
	int enemydamage5;
	if(enemydamage>20&&enemydamage<=120)enemydamage5=enemydamage-20;
	else if(enemydamage>120)enemydamage5=100;
	else  enemydamage5=0;
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,875,680,100,70,200-enemydamage5,92);
	int enemydamage6;
	if(enemydamage>20)enemydamage6=20;
	else enemydamage6=enemydamage;
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,975,680,35,70,55-enemydamage6,95);
	//外枠
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,240,660,0,0,40,45);
	for(int i=0;i<3;i++){
		 m_vertex.DrawTextureLT(m_pDevice,enemyHP,280+(i*200),660,100,0,300,45);
	}
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,880,660,100,0,200,45);
	m_vertex.DrawTextureLT(m_pDevice,enemyHP,980,660,40,0,100,45);

//	////敵2体時
//	////敵1体目
//	////黒ゲージ
//	///*m_vertex.DrawTextureLT(m_pDevice,enemyHP,200,680,0,45,35,70);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,235,680,100,45,300,67);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,425,680,100,45,210,67);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,535,680,35,45,55,70);*/
//	//////赤ゲージ
//	////int enemydamage1;
//	////if(enemydamage>335&&enemydamage<=345)enemydamage1=enemydamage-335;
//	////else if(enemydamage>345)enemydamage1=10;
//	////else  enemydamage1=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,200,680,0,70,35-enemydamage1,95);
//	////int enemydamage2;
//	////if(enemydamage>135&&enemydamage<=335)enemydamage2=enemydamage-135;
//	////else if(enemydamage>235)enemydamage2=200;
//	////else  enemydamage2=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,235,680,100,70,300-enemydamage2,92);
//	////int enemydamage3;
//	////if(enemydamage>20&&enemydamage<=135)enemydamage3=enemydamage-20;
//	////else if(enemydamage>135)enemydamage3=115;
//	////else  enemydamage3=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,425,680,100,70,215-enemydamage3,92);
//	////int enemydamage4;
//	////if(enemydamage>20)enemydamage4=20;
//	////else enemydamage4=enemydamage;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,535,680,35,70,55-enemydamage4,95);
//	////外枠
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,200,660,0,0,40,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,240,660,100,0,300,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,440,660,100,0,200,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,540,660,40,0,100,45);
//	//////敵2体目
//	//////黒ゲージ
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,650,680,0,45,35,70);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,685,680,100,45,300,67);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,885,680,100,45,210,67);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,985,680,35,45,55,70);
//	//////赤ゲージ
//	////int enemydamage1;
//	////if(enemydamage>335&&enemydamage<=345)enemydamage1=enemydamage-335;
//	////else if(enemydamage>345)enemydamage1=10;
//	////else  enemydamage1=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,650,680,0,70,35-enemydamage1,95);
//	////int enemydamage2;
//	////if(enemydamage>135&&enemydamage<=335)enemydamage2=enemydamage-135;
//	////else if(enemydamage>235)enemydamage2=200;
//	////else  enemydamage2=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,685,680,100,70,300-enemydamage2,92);
//	////int enemydamage3;
//	////if(enemydamage>20&&enemydamage<=135)enemydamage3=enemydamage-20;
//	////else if(enemydamage>135)enemydamage3=115;
//	////else  enemydamage3=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,885,680,100,70,215-enemydamage3,92);
//	////int enemydamage4;
//	////if(enemydamage>20)enemydamage4=20;
//	////else enemydamage4=enemydamage;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,985,985,35,70,55-enemydamage4,95);
//	////外枠
//	///*m_vertex.DrawTextureLT(m_pDevice,enemyHP,650,660,0,0,40,45);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,690,660,100,0,300,45);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,890,660,100,0,200,45);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,990,660,40,0,100,45);*/
//	////敵3体時
//	////敵1体目
//	////黒ゲージ
//	///*m_vertex.DrawTextureLT(m_pDevice,enemyHP,150,680,0,45,35,70);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,185,680,100,45,300,67);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,385,680,35,45,55,70);*/
//	//////赤ゲージ
//	////int enemydamage1;
//	////if(enemydamage>220&&enemydamage<=230)enemydamage1=enemydamage-220;
//	////else if(enemydamage>230)enemydamage1=10;
//	////else  enemydamage1=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,150,680,0,70,35-enemydamage1,95);
//	////int enemydamage2;
//	////if(enemydamage>20&&enemydamage<=220)enemydamage2=enemydamage-20;
//	////else if(enemydamage>220)enemydamage2=200;
//	////else  enemydamage2=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,185,680,100,70,300-enemydamage2,92);
//	////int enemydamage3;
//	////if(enemydamage>20)enemydamage3=20;
//	////else enemydamage3=enemydamage;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,385,680,35,70,55-enemydamage3,95);
//	////外枠
//	///*m_vertex.DrawTextureLT(m_pDevice,enemyHP,150,660,0,0,40,45);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,190,660,100,0,300,45);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,390,660,40,0,100,45);*/
//	////敵2体目
//	////黒ゲージ
//	///*m_vertex.DrawTextureLT(m_pDevice,enemyHP,500,680,0,45,35,70);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,535,680,100,45,300,67);
//	//m_vertex.DrawTextureLT(m_pDevice,enemyHP,735,680,35,45,55,70);*/
//	//////赤ゲージ
//	////int enemydamage1;
//	////if(enemydamage>220&&enemydamage<=230)enemydamage1=enemydamage-220;
//	////else if(enemydamage>230)enemydamage1=10;
//	////else  enemydamage1=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,500,680,0,70,35-enemydamage1,95);
//	////int enemydamage2;
//	////if(enemydamage>20&&enemydamage<=220)enemydamage2=enemydamage-20;
//	////else if(enemydamage>220)enemydamage2=200;
//	////else  enemydamage2=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,535,680,100,70,300-enemydamage2,92);
//	////int enemydamage3;
//	////if(enemydamage>20)enemydamage3=20;
//	////else enemydamage3=enemydamage;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,735,680,35,70,55-enemydamage3,95);
//	//////外枠
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,500,660,0,0,40,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,540,660,100,0,300,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,740,660,40,0,100,45);
//	//////敵3体目
//	//////黒ゲージ
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,850,680,0,45,35,70);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,885,680,100,45,300,67);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,1085,680,35,45,55,70);
//	//////赤ゲージ
//	////int enemydamage1;
//	////if(enemydamage>220&&enemydamage<=230)enemydamage1=enemydamage-220;
//	////else if(enemydamage>230)enemydamage1=10;
//	////else  enemydamage1=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,850,680,0,70,35-enemydamage1,95);
//	////int enemydamage2;
//	////if(enemydamage>20&&enemydamage<=220)enemydamage2=enemydamage-20;
//	////else if(enemydamage>220)enemydamage2=200;
//	////else  enemydamage2=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,885,680,100,70,300-enemydamage2,92);
//	////int enemydamage3;
//	////if(enemydamage>20)enemydamage3=20;
//	////else enemydamage3=enemydamage;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,1085,680,35,70,55-enemydamage3,95);
//	//////外枠
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,850,660,0,0,40,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,890,660,100,0,300,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,1090,660,40,0,100,45);
//
//	//
//	////敵4体時
//	//////敵1体目
//	//////黒ゲージ
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,100,680,0,45,35,70);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,135,680,100,45,250,67);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,285,680,35,45,55,70);
//	//////赤ゲージ
//	////int enemydamage1;
//	////if(enemydamage>170&&enemydamage<=180)enemydamage1=enemydamage-170;
//	////else if(enemydamage>180)enemydamage1=10;
//	////else  enemydamage1=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,100,680,0,70,35-enemydamage1,95);
//	////int enemydamage2;
//	////if(enemydamage>20&&enemydamage<=170)enemydamage2=enemydamage-20;
//	////else if(enemydamage>170)enemydamage2=150;
//	////else  enemydamage2=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,135,680,100,70,250-enemydamage2,92);
//	////int enemydamage3;
//	////if(enemydamage>20)enemydamage3=20;
//	////else enemydamage3=enemydamage;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,285,680,35,70,55-enemydamage3,95);
//	//////外枠
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,100,660,0,0,40,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,140,660,100,0,250,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,290,660,40,0,100,45);
//	////敵2体目
//	////黒ゲージ
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,360,680,0,45,35,70);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,395,680,100,45,250,67);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,545,680,35,45,55,70);
//	//////赤ゲージ
//	////int enemydamage1;
//	////if(enemydamage>170&&enemydamage<=180)enemydamage1=enemydamage-170;
//	////else if(enemydamage>180)enemydamage1=10;
//	////else  enemydamage1=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,360,680,0,70,35-enemydamage1,95);
//	////int enemydamage2;
//	////if(enemydamage>20&&enemydamage<=170)enemydamage2=enemydamage-20;
//	////else if(enemydamage>170)enemydamage2=150;
//	////else  enemydamage2=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,395,680,100,70,250-enemydamage2,92);
//	////int enemydamage3;
//	////if(enemydamage>20)enemydamage3=20;
//	////else enemydamage3=enemydamage;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,545,680,35,70,55-enemydamage3,95);
//	//////外枠
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,360,660,0,0,40,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,400,660,100,0,250,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,550,660,40,0,100,45);
//	//////敵3体目
//	//////黒ゲージ
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,620,680,0,45,35,70);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,655,680,100,45,250,67);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,805,680,35,45,55,70);
//	//////赤ゲージ
//	////int enemydamage1;
//	////if(enemydamage>170&&enemydamage<=180)enemydamage1=enemydamage-170;
//	////else if(enemydamage>180)enemydamage1=10;
//	////else  enemydamage1=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,620,680,0,70,35-enemydamage1,95);
//	////int enemydamage2;
//	////if(enemydamage>20&&enemydamage<=170)enemydamage2=enemydamage-20;
//	////else if(enemydamage>170)enemydamage2=150;
//	////else  enemydamage2=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,655,680,100,70,250-enemydamage2,92);
//	////int enemydamage3;
//	////if(enemydamage>20)enemydamage3=20;
//	////else enemydamage3=enemydamage;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,805,680,35,70,55-enemydamage3,95);
//	//////外枠
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,620,660,0,0,40,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,660,660,100,0,250,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,810,660,40,0,100,45);
//	////敵4体目
//	////黒ゲージ
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,880,680,0,45,35,70);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,915,680,100,45,250,67);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,1065,680,35,45,55,70);
//	//////赤ゲージ
//	////int enemydamage1;
//	////if(enemydamage>170&&enemydamage<=180)enemydamage1=enemydamage-170;
//	////else if(enemydamage>180)enemydamage1=10;
//	////else  enemydamage1=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,880,680,0,70,35-enemydamage1,95);
//	////int enemydamage2;
//	////if(enemydamage>20&&enemydamage<=170)enemydamage2=enemydamage-20;
//	////else if(enemydamage>170)enemydamage2=150;
//	////else  enemydamage2=0;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,915,680,100,70,250-enemydamage2,92);
//	////int enemydamage3;
//	////if(enemydamage>20)enemydamage3=20;
//	////else enemydamage3=enemydamage;
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,1065,680,35,70,55-enemydamage3,95);
//	//////外枠
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,880,660,0,0,40,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,920,660,100,0,250,45);
//	////m_vertex.DrawTextureLT(m_pDevice,enemyHP,1070,660,40,0,100,45);
//


}

